https://pastebin.com/H4xrbDY5

import SwiftUI

struct ContentView: View {
    let images = ["1", "2", "3"]
    @State private var currentImageIndex = 0
    @State private var showTitle = false
    @State private var title = ""
    var body: some View {
        VStack {
            Image(images[currentImageIndex])
                .resizable()
                .aspectRatio(contentMode: .fit)
                .padding()
                .onTapGesture {
                    self.showTitle.toggle()
                }
                .onLongPressGesture(minimumDuration: 1) {
                    self.title = self.images[self.currentImageIndex]
                    self.showTitle = true
                }
                .gesture(
                    DragGesture(minimumDistance: 100, coordinateSpace: .local)
                        .onEnded({ value in
                            if value.translation.width < 0 {
                                if self.currentImageIndex < self.images.count - 1 {
                                    self.currentImageIndex += 1
                                } else {
                                    self.currentImageIndex = 0
                                }
                            }
                            if value.translation.width > 0 {
                                if self.currentImageIndex > 0 {
                                    self.currentImageIndex -= 1
                                } else {
                                    self.currentImageIndex = self.images.count - 1
                                }
                            }
                        })
                )
            if showTitle {
                Text(title)
            }
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}







import SwiftUI

struct ContentView: View {
    @State private var textColor = Color.blue
    
    var body: some View {
        let longPressGesture = LongPressGesture(minimumDuration: 1)
            .onEnded { _ in
                if self.textColor == Color.blue {
                    self.textColor = Color.red
                } else {
                    self.textColor = Color.blue
                }
            }
        

        
        return VStack {
            Text("Test")
                .foregroundColor(textColor)
                .gesture(longPressGesture)
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}





import SwiftUI

struct ContentView: View {
    @State private var position = CGPoint(x: 200, y: 500)
    @GestureState private var dragOffset = CGSize.zero
    
    var body: some View {
        let dragGesture = DragGesture()
            .updating($dragOffset) { value, state, _ in
                state = value.translation
            }
            .onEnded { value in
                self.position.x += value.translation.width
                self.position.y += value.translation.height
            }
        
        let circle = Rectangle()
            .frame(width: 100, height: 100)
            .foregroundColor(Color.red)
            .position(position)
            .offset(dragOffset)
            .gesture(dragGesture)
        
        return ZStack {
            circle
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}







import SwiftUI

struct Car: Identifiable {
    let id = UUID()
    let make: String
    let model: String
    let logo: Image
}

struct ContentView: View {
    @State var cars = [
        Car(make: "Ford", model: "Mustang", logo: Image("ford")),
        Car(make: "Chevrolet", model: "Camaro", logo: Image("chevrolet")),
        Car(make: "Dodge", model: "Challenger", logo: Image("dodge")),
        Car(make: "Tesla", model: "Model S", logo: Image("tesla")),
        Car(make: "BMW", model: "M4", logo: Image("bmw")),
    ]
    
    var body: some View {
        NavigationView {
            (List {
                ForEach(cars) { car in
                    HStack {
                        car.logo
                            .resizable()
                            .frame(width: 50, height: 50)
                        Text("\(car.make) \(car.model)")
                    }
                    .onTapGesture {
                        self.removeCar(car)
                    }
                }
                .onDelete(perform: removeCar)
            }
         
            .navigationBarItems(trailing: EditButton())
        )
    }
    }
    func removeCar(at offsets: IndexSet) {
        cars.remove(atOffsets: offsets)
    }
    
    func removeCar(_ car: Car) {
        if let index = cars.firstIndex(where: { $0.id == car.id }) {
            cars.remove(at: index)
        }
    }
}



struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
